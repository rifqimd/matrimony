{"version":3,"file":"script.js","mappings":"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","sources":["webpack://audio-player/./src/blocks/mp3-player/script.js","webpack://audio-player/./src/blocks/mp3-player/MP3Player.js"],"sourcesContent":["import './style.scss';\nimport MP3Player from './MP3Player';\n\n// Audio Player\ndocument.addEventListener('DOMContentLoaded', () => {\n\tconst allAudioPlayer = document.querySelectorAll('.wp-block-bpmp-mp3-player');\n\tallAudioPlayer.forEach(audioPlayer => {\n\t\tconst attributes = JSON.parse(audioPlayer.dataset.attributes);\n\t\tconst { audioProperties } = attributes;\n\n\t\tMP3Player(audioPlayer, audioProperties);\n\n\t\taudioPlayer?.removeAttribute('data-attributes');\n\t});\n});","const defaultCoverImg = 'https://i.ibb.co/1qDChXj/cassette-tape-square.jpg';\n\nconst MP3Player = (selector, songs = []) => {\n\tconst element = typeof selector == 'string' ? document.querySelector(selector) : selector;\n\n\tconst cover = element.querySelector('#cover');\n\tconst disc = element.querySelector('#disc');\n\tconst title = element.querySelector('#title');\n\tconst artist = element.querySelector('#artist');\n\tconst progressContainer = element.querySelector('#progressContainer');\n\tconst progress = element.querySelector('#progress');\n\tconst timer = element.querySelector('#timer');\n\tconst duration = element.querySelector('#duration');\n\tconst prev = element.querySelector('#prev');\n\tconst play = element.querySelector('#play');\n\tconst next = element.querySelector('#next');\n\tlet songIndex = 0;\n\n\t// Load song initially\n\n\t// Load the given song\n\tconst loadSong = (song) => {\n\t\tcover.src = song.cover?.url || defaultCoverImg;\n\t\tdisc.src = song.audio?.url;\n\t\ttitle.textContent = song.title;\n\t\tartist.textContent = song.artist;\n\t\t// duration.textContent = song.duration;\n\t\tdisc.addEventListener('loadedmetadata', function () {\n\t\t\tduration.innerHTML = toHHMMSS(disc.duration);\n\t\t});\n\t};\n\tloadSong(songs[songIndex]);\n\n\t// Toggle play and pause\n\tfunction playPauseMedia() {\n\t\tif (disc.paused) {\n\t\t\tconst allAudioEls = document.querySelectorAll('audio');\n\t\t\tallAudioEls.forEach(audioEl => audioEl?.pause());\n\n\t\t\tdisc.play();\n\t\t} else {\n\t\t\tdisc.pause();\n\t\t}\n\t}\n\n\t// Convert time\n\tfunction toHHMMSS(time) {\n\t\tvar sec_num = parseInt(time, 10); // don't forget the second param\n\t\tvar hours = Math.floor(sec_num / 3600);\n\t\tvar minutes = Math.floor((sec_num - hours * 3600) / 60);\n\t\tvar seconds = sec_num - hours * 3600 - minutes * 60;\n\n\t\tif (hours < 10) {\n\t\t\thours = '0' + hours;\n\t\t}\n\t\tif (minutes < 10) {\n\t\t\tminutes = '0' + minutes;\n\t\t}\n\t\tif (seconds < 10) {\n\t\t\tseconds = '0' + seconds;\n\t\t}\n\n\t\treturn `${parseInt(hours) > 0 ? `${hours}:` : ''}${minutes}:${seconds}`;\n\t}\n\n\t// Update icon\n\tfunction updatePlayPauseIcon() {\n\t\tif (disc.paused) {\n\t\t\tplay.classList.remove('pauseBtn');\n\t\t\tplay.classList.add('playBtn');\n\t\t} else {\n\t\t\tplay.classList.remove('playBtn');\n\t\t\tplay.classList.add('pauseBtn');\n\t\t}\n\t}\n\n\t// Update progress bar\n\tfunction updateProgress() {\n\t\tprogress.style.width = (disc.currentTime / disc.duration) * 100 + '%';\n\n\t\tvar hours = Math.floor(disc.currentTime / 3600);\n\t\tvar minutes = Math.floor((disc.currentTime - hours * 3600) / 60);\n\t\tvar seconds = Math.floor(disc.currentTime - hours * 3600 - minutes * 60);\n\t\t// let minutes = Math.floor(disc.currentTime / 60);\n\t\t// let seconds = Math.floor(disc.currentTime % 60);\n\t\tif (hours < 10) {\n\t\t\thours = '0' + hours;\n\t\t}\n\t\tif (minutes < 10) {\n\t\t\tminutes = '0' + minutes;\n\t\t}\n\t\tif (seconds < 10) {\n\t\t\tseconds = '0' + seconds;\n\t\t}\n\t\ttimer.textContent = `${parseInt(hours) > 0 ? `${hours}:` : ''}${minutes}:${seconds}`;\n\t}\n\n\t// Reset the progress\n\tfunction resetProgress() {\n\t\tprogress.style.width = 0 + '%';\n\t\ttimer.textContent = '0:00';\n\t}\n\n\t// Go to previous song\n\tfunction gotoPreviousSong() {\n\t\tif (songIndex === 0) {\n\t\t\tsongIndex = songs.length - 1;\n\t\t} else {\n\t\t\tsongIndex = songIndex - 1;\n\t\t}\n\n\t\tconst isDiscPlayingNow = !disc.paused;\n\t\tloadSong(songs[songIndex]);\n\t\tresetProgress();\n\t\tif (isDiscPlayingNow) {\n\t\t\tplayPauseMedia();\n\t\t}\n\t}\n\n\t// Go to next song\n\tfunction gotoNextSong(playImmediately) {\n\t\tif (songIndex === songs.length - 1) {\n\t\t\tsongIndex = 0;\n\t\t} else {\n\t\t\tsongIndex = songIndex + 1;\n\t\t}\n\n\t\tconst isDiscPlayingNow = !disc.paused;\n\t\tloadSong(songs[songIndex]);\n\t\tresetProgress();\n\t\tif (isDiscPlayingNow || playImmediately) {\n\t\t\tplayPauseMedia();\n\t\t}\n\t}\n\n\t// Change song progress when clicked on progress bar\n\tfunction setProgress(ev) {\n\t\tconst totalWidth = this.clientWidth;\n\t\tconst clickWidth = ev.offsetX;\n\t\tconst clickWidthRatio = clickWidth / totalWidth;\n\t\tdisc.currentTime = clickWidthRatio * disc.duration;\n\t}\n\n\t// Play/Pause when play button clicked\n\tplay.addEventListener('click', playPauseMedia);\n\n\t// Various events on disc\n\tdisc.addEventListener('play', updatePlayPauseIcon);\n\tdisc.addEventListener('pause', updatePlayPauseIcon);\n\tdisc.addEventListener('timeupdate', updateProgress);\n\tdisc.addEventListener('ended', gotoNextSong.bind(null, true));\n\n\t// Go to next song when next button clicked\n\tprev.addEventListener('click', gotoPreviousSong);\n\n\t// Go to previous song when previous button clicked\n\tnext.addEventListener('click', gotoNextSong.bind(null, false));\n\n\t// Move to different place in the song\n\tprogressContainer.addEventListener('click', setProgress);\n};\nexport default MP3Player;"],"names":["document","addEventListener","querySelectorAll","forEach","audioPlayer","attributes","JSON","parse","dataset","audioProperties","selector","songs","arguments","length","undefined","element","querySelector","cover","disc","title","artist","progressContainer","progress","timer","duration","prev","play","next","songIndex","loadSong","song","src","url","audio","textContent","time","sec_num","hours","minutes","seconds","innerHTML","parseInt","Math","floor","playPauseMedia","paused","audioEl","pause","updatePlayPauseIcon","classList","remove","add","resetProgress","style","width","gotoNextSong","playImmediately","isDiscPlayingNow","currentTime","bind","ev","totalWidth","this","clientWidth","clickWidthRatio","offsetX","MP3Player","removeAttribute"],"sourceRoot":""}